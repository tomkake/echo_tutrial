// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Error defines model for error.
type Error struct {
	// Code エラーコード
	Code string `json:"code"`

	// Details エラーの詳細情報
	Details *[]struct {
		// Field エラーが発生したフィールド
		Field *string `json:"field,omitempty"`

		// Message フィールドに関するエラーメッセージ
		Message *string `json:"message,omitempty"`
	} `json:"details,omitempty"`

	// Message エラーメッセージ
	Message string `json:"message"`
}

// User defines model for user.
type User struct {
	// Name ユーザーの名前
	Name string `json:"name"`
}

// UserInfo defines model for user_info.
type UserInfo struct {
	Email openapi_types.Email `json:"email"`
	Name  string              `json:"name"`
}

// BadRequest defines model for BadRequest.
type BadRequest struct {
	// Code エラーコード
	Code string `json:"code"`

	// Details エラーの詳細情報
	Details *[]struct {
		// Field エラーが発生したフィールド
		Field *string `json:"field,omitempty"`

		// Message フィールドに関するエラーメッセージ
		Message *string `json:"message,omitempty"`
	} `json:"details,omitempty"`

	// Message エラーメッセージ
	Message string `json:"message"`
}

// Forbidden defines model for Forbidden.
type Forbidden struct {
	// Code エラーコード
	Code string `json:"code"`

	// Details エラーの詳細情報
	Details *[]struct {
		// Field エラーが発生したフィールド
		Field *string `json:"field,omitempty"`

		// Message フィールドに関するエラーメッセージ
		Message *string `json:"message,omitempty"`
	} `json:"details,omitempty"`

	// Message エラーメッセージ
	Message string `json:"message"`
}

// InternalServerError defines model for InternalServerError.
type InternalServerError struct {
	// Code エラーコード
	Code string `json:"code"`

	// Details エラーの詳細情報
	Details *[]struct {
		// Field エラーが発生したフィールド
		Field *string `json:"field,omitempty"`

		// Message フィールドに関するエラーメッセージ
		Message *string `json:"message,omitempty"`
	} `json:"details,omitempty"`

	// Message エラーメッセージ
	Message string `json:"message"`
}

// NotFound defines model for NotFound.
type NotFound struct {
	// Code エラーコード
	Code string `json:"code"`

	// Details エラーの詳細情報
	Details *[]struct {
		// Field エラーが発生したフィールド
		Field *string `json:"field,omitempty"`

		// Message フィールドに関するエラーメッセージ
		Message *string `json:"message,omitempty"`
	} `json:"details,omitempty"`

	// Message エラーメッセージ
	Message string `json:"message"`
}

// ServiceUnavailable defines model for ServiceUnavailable.
type ServiceUnavailable struct {
	// Code エラーコード
	Code string `json:"code"`

	// Details エラーの詳細情報
	Details *[]struct {
		// Field エラーが発生したフィールド
		Field *string `json:"field,omitempty"`

		// Message フィールドに関するエラーメッセージ
		Message *string `json:"message,omitempty"`
	} `json:"details,omitempty"`

	// Message エラーメッセージ
	Message string `json:"message"`
}

// PostUserJSONRequestBody defines body for PostUser for application/json ContentType.
type PostUserJSONRequestBody = UserInfo

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// ユーザー登録
	// (POST /v1/user)
	PostUser(ctx echo.Context) error
	// ユーザー一覧取得
	// (GET /v1/users)
	GetUsers(ctx echo.Context) error
	// ユーザー削除
	// (DELETE /v1/users/{user_id})
	DeleteUser(ctx echo.Context, userId openapi_types.UUID) error
	// ユーザー情報更新
	// (PATCH /v1/users/{user_id})
	PathUser(ctx echo.Context, userId openapi_types.UUID) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostUser converts echo context to params.
func (w *ServerInterfaceWrapper) PostUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostUser(ctx)
	return err
}

// GetUsers converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUsers(ctx)
	return err
}

// DeleteUser converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "user_id", runtime.ParamLocationPath, ctx.Param("user_id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteUser(ctx, userId)
	return err
}

// PathUser converts echo context to params.
func (w *ServerInterfaceWrapper) PathUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "user_id", runtime.ParamLocationPath, ctx.Param("user_id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PathUser(ctx, userId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/v1/user", wrapper.PostUser)
	router.GET(baseURL+"/v1/users", wrapper.GetUsers)
	router.DELETE(baseURL+"/v1/users/:user_id", wrapper.DeleteUser)
	router.PATCH(baseURL+"/v1/users/:user_id", wrapper.PathUser)

}
